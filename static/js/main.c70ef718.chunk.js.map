{"version":3,"sources":["components/TodoForm/TodoForm.js","components/Checkbox/Checkbox.js","components/TodoItem/TodoItem.js","components/TodoItemList/TodoItemList.js","components/ProgressBar/ProgressBar.js","containers/App/App.js","serviceWorker.js","index.js"],"names":["TodoForm","state","value","handelInputChange","e","_this","setState","target","onSubmit","preventDefault","props","react_default","a","createElement","className","this","onChange","placeholder","React","Component","defaultProps","Checkbox","_ref","checked","onClick","concat","TodoItem","id","detail","done","onDelete","onToggleDone","onEdit","components_Checkbox_Checkbox","TodoItemList","items","Object","objectWithoutProperties","map","item","components_TodoItem_TodoItem","assign","key","ProgressBar","showPercent","progress","itemCount","length","Math","floor","filter","calculateProgress","style","width","App","generateUID","Date","getTime","onCreateTodo","todo","toConsumableArray","objectSpread","getTodoItemsByStatus","todoItems","doneItems","components_TodoForm_TodoForm","Fragment","components_ProgressBar_ProgressBar","components_TodoItemList_TodoItemList","Boolean","window","location","hostname","match","ReactDOM","render","containers_App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c70ef718.chunk.js","sourcesContent":["import React from 'react'\nimport { func, string } from 'prop-types'\nimport './style.scss'\n\nclass TodoForm extends React.Component {\n  state = {\n    value: '',\n  }\n\n  handelInputChange = e => {\n    this.setState({ value: e.target.value })\n  }\n\n  onSubmit = e => {\n    e.preventDefault()\n    if (this.state.value !== '') {\n      this.props.onSubmit(this.state.value)\n      this.setState({ value: '' })\n    }\n  }\n\n  render() {\n    return (\n      <form className=\"todo-form\" onSubmit={this.onSubmit}>\n        <span className=\"todo-form__plus-icon\">+</span>\n        <input\n          className=\"todo-form__input\"\n          onChange={this.handelInputChange}\n          value={this.state.value}\n          placeholder={this.props.placeholder}\n        />\n      </form>\n    )\n  }\n}\n\nTodoForm.propTypes = {\n  onSubmit: func.isRequired,\n  placeholder: string,\n}\n\nTodoForm.defaultProps = {\n  placeholder: '',\n}\n\nexport default TodoForm\n","import React from 'react'\nimport { bool, func } from 'prop-types'\nimport './style.scss'\n\nconst Checkbox = ({ checked, onClick }) => {\n  return <span className={`checkbox ${checked && 'checkbox--checked'}`} onClick={onClick} />\n}\n\nCheckbox.propTypes = {\n  checked: bool.isRequired,\n  onClick: func.isRequired,\n}\n\nexport default Checkbox\n","import React from 'react'\nimport { number, string, bool, func } from 'prop-types'\nimport Checkbox from 'components/Checkbox'\nimport './style.scss'\n\nconst TodoItem = ({ id, detail, done, onDelete, onToggleDone, onEdit }) => {\n  const onChange = e => {\n    onEdit(id, e.target.value)\n  }\n\n  return (\n    <li className=\"todo-item\">\n      <span className=\"todo-item__checkbox\">\n        <Checkbox onClick={() => onToggleDone(id)} checked={done} />\n      </span>\n      <input\n        className={`todo-item__input ${done ? 'todo-item__input--done' : ''}`}\n        onChange={onChange}\n        value={detail}\n      />\n      <button className=\"todo-item__remove-btn\" onClick={() => onDelete(id)}>\n        <i className=\"fa fa-trash\" />\n      </button>\n    </li>\n  )\n}\n\nTodoItem.propTypes = {\n  id: number,\n  detail: string,\n  done: bool,\n  onToggleDone: func,\n  onDone: func,\n  onEdit: func,\n}\n\nexport default TodoItem\n","import React from 'react'\nimport { shape, arrayOf, string, bool, number, func } from 'prop-types'\nimport TodoItem from 'components/TodoItem'\nimport './style.scss'\n\nconst TodoItemList = ({ items, ...props }) => {\n  return (\n    <ol className=\"todo-item-list\">\n      {items.map(item => (\n        <TodoItem key={item.id} {...props} {...item} />\n      ))}\n    </ol>\n  )\n}\n\nTodoItemList.propTypes = {\n  items: arrayOf(\n    shape({\n      id: number,\n      detail: string,\n      done: bool,\n    }),\n  ).isRequired,\n  onDelete: func.isRequired,\n  onToggleDone: func.isRequired,\n  onEdit: func,\n}\n\nTodoItemList.defaultProps = {\n  items: [],\n  onEdit: () => {},\n}\n\nexport default TodoItemList\n","import React from 'react'\nimport { arrayOf, shape, number, string, bool } from 'prop-types'\nimport './style.scss'\n\nconst ProgressBar = ({ items, showPercent }) => {\n  const calculateProgress = () => {\n    const itemCount = items.length\n    if (itemCount === 0) {\n      return 0\n    }\n\n    return 100 - Math.floor((100 * items.filter(item => !item.done).length) / itemCount)\n  }\n  const progress = calculateProgress()\n\n  return (\n    <div className=\"progress\">\n      {showPercent && <div className=\"progress__text\">{progress}%</div>}\n      <div className=\"progress__bar\">\n        <div className=\"progress__bar--active\" style={{ width: `${progress}%` }} />\n      </div>\n    </div>\n  )\n}\n\nProgressBar.propTypes = {\n  items: arrayOf(\n    shape({\n      id: number,\n      title: string,\n      done: bool,\n    }),\n  ).isRequired,\n  showPercent: bool,\n}\n\nProgressBar.defaultProps = {\n  showPercent: false,\n}\n\nexport default ProgressBar\n","import React from 'react'\nimport TodoForm from 'components/TodoForm'\nimport TodoItemList from 'components/TodoItemList'\nimport ProgressBar from 'components/ProgressBar'\nimport './style.scss'\n\nclass App extends React.Component {\n  state = {\n    items: [],\n  }\n\n  generateUID = () => new Date().getTime()\n\n  onCreateTodo = todo => {\n    this.setState(state => ({\n      items: [\n        {\n          id: this.generateUID(),\n          detail: todo,\n          done: false,\n        },\n        ...state.items,\n      ],\n    }))\n  }\n\n  onDelete = id => {\n    this.setState(state => ({\n      items: state.items.filter(item => item.id !== id),\n    }))\n  }\n\n  onToggleDone = id => {\n    this.setState(state => ({\n      items: state.items.map(item => {\n        if (item.id === id) {\n          return {\n            ...item,\n            done: !item.done,\n          }\n        }\n        return item\n      }),\n    }))\n  }\n\n  getTodoItemsByStatus = ({ done }) => {\n    return this.state.items.filter(item => item.done === done)\n  }\n\n  onEdit = (id, detail) => {\n    this.setState(state => ({\n      items: state.items.map(item => {\n        if (item.id === id) {\n          return {\n            ...item,\n            detail: detail,\n          }\n        }\n        return item\n      }),\n    }))\n  }\n\n  render() {\n    const todoItems = this.getTodoItemsByStatus({ done: false })\n    const doneItems = this.getTodoItemsByStatus({ done: true })\n\n    return (\n      <div className=\"app\">\n        <div className=\"app__todo-form\">\n          <TodoForm onSubmit={this.onCreateTodo} placeholder=\"Add a todo...\" />\n        </div>\n        {todoItems.length !== 0 && (\n          <>\n            <div className=\"app__progress-bar\">\n              <ProgressBar items={this.state.items} showPercent />\n            </div>\n            <TodoItemList\n              items={todoItems}\n              onDelete={this.onDelete}\n              onToggleDone={this.onToggleDone}\n              onEdit={this.onEdit}\n            />\n          </>\n        )}\n        {doneItems.length !== 0 && (\n          <>\n            <h3 className=\"app__label\">Done</h3>\n            <TodoItemList items={doneItems} onDelete={this.onDelete} onToggleDone={this.onToggleDone} />\n          </>\n        )}\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from 'containers/App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}